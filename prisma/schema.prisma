generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int      @id @default(autoincrement())
    email             String   @unique
    name              String?
    role              Role     @default(VISITOR)
    isRegularCustomer Boolean  @default(false)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    exhibitions Exhibition[]
    artifacts   Artifact[]
    bookings    Booking[]

    @@map("users")
}

model Exhibition {
    id          Int       @id @default(autoincrement())
    title       String
    description String?   @db.Text
    startDate   DateTime
    endDate     DateTime?
    isActive    Boolean   @default(true)
    price       Decimal?  @db.Decimal(10, 2)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    curator   User       @relation(fields: [curatorId], references: [id])
    curatorId Int
    artifacts Artifact[]
    events    Event[]

    @@map("exhibitions")
}

model Artifact {
    id          Int      @id @default(autoincrement())
    name        String
    description String?  @db.Text
    category    Category
    year        Int?
    isDisplayed Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    addedBy      User        @relation(fields: [addedById], references: [id])
    addedById    Int
    exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
    exhibitionId Int?

    @@map("artifacts")
}

model Event {
    id                  Int       @id @default(autoincrement())
    title               String
    description         String?   @db.Text
    eventDate           DateTime
    maxParticipants     Int
    currentParticipants Int       @default(0)
    price               Decimal   @db.Decimal(10, 2)
    eventType           EventType
    isActive            Boolean   @default(true)
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt

    exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
    exhibitionId Int?
    bookings     Booking[]

    @@map("events")
}

model Booking {
    id             Int           @id @default(autoincrement())
    bookingNumber  String        @unique
    numberOfPeople Int
    totalPrice     Decimal       @db.Decimal(10, 2)
    status         BookingStatus @default(PENDING)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    user    User   @relation(fields: [userId], references: [id])
    userId  Int
    event   Event? @relation(fields: [eventId], references: [id])
    eventId Int?

    @@map("bookings")
}

enum Role {
    ADMIN
    CURATOR
    VISITOR
}

enum Category {
    TEXTBOOKS
    SCHOOL_SUPPLIES
    HISTORICAL_DOCUMENTS
    PHOTOGRAPHS
    EQUIPMENT
    UNIFORMS
    AWARDS
    OTHER
}

enum EventType {
    GUIDED_TOUR
    WORKSHOP
    LECTURE
    SPECIAL_EVENT
    GROUP_VISIT
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    COMPLETED
}
